{"version":3,"sources":["components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["PostList","props","state","posts","errorMessage","axios","get","then","resposne","console","log","setState","data","catch","error","this","length","map","post","key","id","title","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0SA6CeA,E,kDAzCf,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,MAAO,GACPC,aAAa,IALF,E,gEAQM,IAAD,OAChBC,IAAMC,IAAI,8CACLC,MAAK,SAAAC,GACFC,QAAQC,IAAI,4BAA6BF,GACzC,EAAKG,SAAS,CACVR,MAAOK,EAASI,UAGvBC,OAAM,SAAAC,GACHL,QAAQC,IAAII,GACZ,EAAKH,SAAS,CACVP,aAAa,+B,+BAMnB,IAAD,EACuBW,KAAKb,MAAzBC,EADH,EACGA,MAAMC,EADT,EACSA,aACd,OACI,6BAEQD,EAAMa,OACFb,EAAMc,KAAI,SAAAC,GAAI,OAAI,yBAAKC,IAAKD,EAAKE,IAAKF,EAAKG,UAAc,KAG7DjB,EACI,6BAAMA,GAAoB,U,GArC3BkB,aCYRC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,iDACA,6BACE,kBAAC,EAAD,QCRYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAM0B,c","file":"static/js/main.135d7175.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nclass PostList extends Component {\r\n     \r\nconstructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n        posts: [],\r\n        errorMessage:''\r\n    }\r\n    }\r\n    componentDidMount() {\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n            .then(resposne => { \r\n                console.log('from component did mount ', resposne)\r\n                this.setState({\r\n                    posts: resposne.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                this.setState({\r\n                    errorMessage:'error retrieving data'\r\n                })\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { posts,errorMessage}=this.state\r\n        return (\r\n            <div>\r\n                {\r\n                    posts.length ?\r\n                        posts.map(post => <div key={post.id}>{post.title}</div>):null\r\n                }\r\n                {\r\n                    errorMessage ?\r\n                        <div>{errorMessage}</div>:null       \r\n              }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default PostList","import React from 'react';\nimport './App.css';\nimport PostList from './components/PostList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>learn https calls</h1>\n      <hr/>\n        <PostList/>\n    </div>\n  );\n}\n\nexport default App;\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}